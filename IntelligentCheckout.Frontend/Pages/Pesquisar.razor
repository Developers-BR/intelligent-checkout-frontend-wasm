@page "/pesquisar"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject CartService CartService
@implements IDisposable
@using Microsoft.AspNetCore.WebUtilities
@using IntelligentCheckout.Frontend.Components.Produtos

@if (Resultado == null)
{
    <h3>Pesquisando...</h3>
}
else
{
    <h3>Resultados da pesquisa por: @Conteudo</h3>
    <div class="row mt-4">
        @foreach (var prod in Resultado)
        {
            <div class="col-sm col-md-2 col-lg-3 mb-4">
                <CardProduto Produto="@prod" OnClick="@DetalharProduto" />
            </div>
        }
    </div>
}

<BSModal @ref="DetalheProduto" IsCentered="true">
    <BSModalHeader OnClick="@FecharModal">@Detalhe.Nome</BSModalHeader>
    <BSModalBody>
        <img src="@Detalhe.Fotos.FirstOrDefault()" style="width: 100%;" />
        <p>@Detalhe.Descricao</p>
    </BSModalBody>
    <BSModalFooter>
        <div class="col-3 my-auto">
            <strong>@Detalhe.Preco.ToString("C2")</strong>
        </div>
        <div class="col text-right my-auto d-block" style="white-space: nowrap;">
            <label for="inputQtd">Quantidade</label>
            <input name="inputQtd" type="number" min="1" @bind-value="Quantidade" style="width: 50px;" />
            <BSButton Color="Color.Primary" OnClick="@AdicionarAoCarrinho">Adicionar ao Carrinho</BSButton>
        </div>
    </BSModalFooter>
</BSModal>

@code {

    string Conteudo;

    Models.Produto[] Resultado;

    private Models.Produto Detalhe = new Models.Produto();

    BSModal DetalheProduto;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += LocationChanged;

        await ExecutarPesquisa();

        await base.OnInitializedAsync();
    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (!e.IsNavigationIntercepted)
        {
            ExecutarPesquisa();
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
    }

    async Task ExecutarPesquisa()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("conteudo", out var tempConteudo))
        {
            Conteudo = tempConteudo.ToString().Trim();
        }

        string url = $"https://intelligent-checkout-backend.azurewebsites.net/api/produtos/buscar?termo={Conteudo}";
        System.Diagnostics.Debug.WriteLine(url);
        Models.ProdutoIEnumerableResposta response = await HttpClient.GetJsonAsync<Models.ProdutoIEnumerableResposta>(url);
        Resultado = response.Data.OrderBy(p => p.Nome).ToArray();
        StateHasChanged();
    }

    void FecharModal()
    {
        Quantidade = 1;
        DetalheProduto.Style = "";
        DetalheProduto.Hide();
    }

    void AbrirModal()
    {
        DetalheProduto.Style = "display: block; opacity: 1;";
        DetalheProduto.Show();
    }

    void DetalharProduto(Models.Produto produto)
    {
        Detalhe = produto;
        AbrirModal();
    }

    int Quantidade = 1;

    public async Task AdicionarAoCarrinho()
    {
        await CartService.AdicionarItem(new Models.ItemDeCompra
        {
            Produto = Detalhe,
            Quantidade = Quantidade
        });
        Quantidade = 1;
        FecharModal();
    }

}
