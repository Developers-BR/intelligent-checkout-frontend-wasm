@page "/login"
@inject PessoaService PessoaService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<h3>Login</h3>
<br/>
<br />
<h4>Foto para login</h4>
<div class="row">
    <div class="col-12 text-center"><img src="@Picture" width="640" height="480" style="background: #666;" /></div>
</div>
<div class="row mt-2">
    <div class="col-12 my-auto text-center" style="white-space: nowrap;">
        <button type="button" @onclick="@(async () => await GetPic())" class="btn btn-secondary">Obter foto</button>
        <button type="button" @onclick="@(async () => await EfetuarLogin())" class="btn btn-primary" disabled="@LoginDisabled()">Login</button>
    </div>
</div>
<hr />
<center>
    <button type="button" class="btn btn-outline-primary" @onclick="@NavCadastrar">Cadastre-se</button>
</center>

<BSModal @ref="ObterFoto" IsCentered="true">
    <BSModalHeader OnClick="@(async () => await FecharModal())">Capturar imagem</BSModalHeader>
    <BSModalBody>
        <video id="video" width="640" height="480" autoplay style="width: 100%;"></video>
    </BSModalBody>
    <BSModalFooter>
        <div class="col text-right my-auto d-block" style="white-space: nowrap;">
            <BSButton Color="Color.Light" OnClick="@(async () => await FecharModal())">Cancelar</BSButton>
            <BSButton Color="Color.Primary" OnClick="@SnapPic">Capturar</BSButton>
        </div>
    </BSModalFooter>
</BSModal>

@code
{
    string Picture = null;

    BSModal ObterFoto;

    bool LoginDisabled()
    {
        return string.IsNullOrWhiteSpace(Picture);
    }

    protected override void OnInitialized()
    {
        if (PessoaService.ObterPessoaAtual() != null)
        {
            NavigationManager.NavigateTo("/");
        }
        base.OnInitialized();
    }

    void NavCadastrar()
    {
        NavigationManager.NavigateTo("/criar-pessoa");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initPicture");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task FecharModal()
    {
        await JSRuntime.InvokeVoidAsync("stopPicture");
        ObterFoto.Style = "";
        ObterFoto.Hide();
    }

    async Task AbrirModal()
    {
        ObterFoto.Style = "display: block; opacity: 1;";
        ObterFoto.Show();
        await JSRuntime.InvokeVoidAsync("startPicture");
    }

    async Task GetPic()
    {
        await AbrirModal();
    }

    async Task SnapPic()
    {
        await JSRuntime.InvokeVoidAsync("snapPicture");
        var result = await JSRuntime.InvokeAsync<string>("exportPicture");
        await JSRuntime.InvokeVoidAsync("stopPicture");
        Picture = result;
        await FecharModal();
    }

    async Task EfetuarLogin()
    {
        string url = "https://intelligent-checkout-backend.azurewebsites.net/api/pessoas/obter-pelo-rosto";
        Models.ObterPessoaPeloRosto data = new Models.ObterPessoaPeloRosto() { FotoDoRostoEmBase64 = Picture };
        Models.CadastrarPessoaResposta resposta = await HttpClient.PostJsonAsync<Models.CadastrarPessoaResposta>(url, data);
        if (resposta != null && resposta.Data != null)
        {
            PessoaService.AtualizarPessoa(resposta.Data);
            NavigationManager.NavigateTo("/");
        }
    }
}
